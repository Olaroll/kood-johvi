{
  "openapi": "3.0.1",
  "info": {
    "title": "Pulse Backend API",
    "description": "Pulse RESTful API used by Pulse App",
    "contact": {
      "name": "AS Proekspert",
      "url": "https://www.proekspert.ee",
      "email": "info@proekspert.ee"
    },
    "license": {
      "name": "Proekspert Internal License"
    },
    "version": "v2022-03"
  },
  "externalDocs": {
    "description": "Pulse Proekspert Wiki Documentation",
    "url": "https://intra.proekspert.ee/wiki/display/INTT/Pulse+Home"
  },
  "servers": [
    {
      "url": "http://pulsedemo.puhh.local:7770",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/api/projects/{projectId}/team/{id}": {
      "put": {
        "tags": [
          "Project team"
        ],
        "summary": "Update a new employee project entry for given project",
        "operationId": "put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeProject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Project team"
        ],
        "summary": "Deletes given employee project entry for given project",
        "operationId": "delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/pricing": {
      "get": {
        "tags": [
          "Project pricing"
        ],
        "summary": "Get list of project pricing records for given project",
        "operationId": "get_6",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectPricing"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Project pricing"
        ],
        "summary": "Update project pricing entries",
        "description": "Records without id will be added. Records with id will be updated. Existing records not sent in request will be deleted.",
        "operationId": "put_1",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectPricing"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectPricing"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project pricing"
        ],
        "summary": "Create a new pricing for given project",
        "description": "If an existing pricing exists without period end date, it's period end will be set to a day before new pricing's period start",
        "operationId": "post_4",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPricing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPricing"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/bookings/{id}": {
      "put": {
        "tags": [
          "Project booking"
        ],
        "summary": "Update employee booking for given project",
        "operationId": "put_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Booking"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Project booking"
        ],
        "summary": "Deletes given booking entry for given project",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/projects/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get a specific project by ID",
        "description": "Supports Query Refinement: Expand, values [contacts,technologies];",
        "operationId": "getById_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Modify an existing project",
        "description": "Modifying an existing project needs elevated permissions.",
        "operationId": "put_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get single employee by ID",
        "description": "Supports Query Refinement: Expand, values [Contacts, Skills, Roles, Languages];",
        "operationId": "getById_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Modify an existing employee",
        "description": "User can modify only their own records, Super Admin can modify everyones records.",
        "operationId": "put_4",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/workhistory/{id}": {
      "get": {
        "tags": [
          "Employee work history"
        ],
        "summary": "Get a specific work-history record for given employee",
        "description": "Supports Query Refinement: Expand, values [Roles];",
        "operationId": "getById_4",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkHistory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Employee work history"
        ],
        "summary": "Modify a work-history record for given employee",
        "description": "User can modify only their own work-history record.",
        "operationId": "put_5",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkHistory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkHistory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Employee work history"
        ],
        "summary": "Delete a work-history record for given employee",
        "description": "User can delete only their own work-history record.",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/workexperience/{id}": {
      "get": {
        "tags": [
          "Employee work experience"
        ],
        "summary": "Get a specific work-experience record for given employee",
        "operationId": "getById_5",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkExperience"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Employee work experience"
        ],
        "summary": "Modify a work-experience record for given employee",
        "description": "User can modify only their own work-experience record.",
        "operationId": "put_6",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkExperience"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkExperience"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Employee work experience"
        ],
        "summary": "Delete a work-experience record for given employee",
        "description": "User can delete only their own work-experience record.",
        "operationId": "delete_4",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/training/{id}": {
      "get": {
        "tags": [
          "Employee training"
        ],
        "summary": "Get a specific training record for given employee",
        "operationId": "getById_6",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Training"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Employee training"
        ],
        "summary": "Modify an existing training record belonging to given employee",
        "description": "User can modify only their own training record.",
        "operationId": "put_7",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Training"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Training"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Employee training"
        ],
        "summary": "Delete an existing training record belonging to given employee",
        "description": "User can delete only their own training record.",
        "operationId": "delete_5",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/projects/{id}": {
      "put": {
        "tags": [
          "Employee project"
        ],
        "summary": "Update employee project entry for given employee",
        "operationId": "put_8",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeProject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/projects/history/{id}": {
      "put": {
        "tags": [
          "Employee project history"
        ],
        "summary": "Update employee project history record",
        "operationId": "put_9",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "Employee ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 0
          },
          {
            "name": "id",
            "in": "path",
            "description": "Employee Project History ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 0
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeProjectHistoryUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeProjectHistoryViewRecord"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/education/{id}": {
      "get": {
        "tags": [
          "Education"
        ],
        "summary": "Get single education entry for given employee",
        "operationId": "getById_7",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Education"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Education"
        ],
        "summary": "Modify an existing education entry for given employee",
        "operationId": "put_10",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Education"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Education"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Education"
        ],
        "summary": "Delete a education entry attached to given employee.",
        "description": "Only the entries belonging to the authenticated users can be deleted.",
        "operationId": "delete_6",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/bookings/{id}": {
      "put": {
        "tags": [
          "Employee booking"
        ],
        "summary": "Update booking entry for given employee",
        "operationId": "put_11",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Booking"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/challenges/{id}": {
      "get": {
        "tags": [
          "Challenge"
        ],
        "summary": "Get a single challenge by ID",
        "description": "Supports Query Refinement: Expand, values [Skills, Roles, Author, Project];",
        "operationId": "getById_8",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Challenge"
        ],
        "summary": "Modify an existing challenge",
        "description": "Only the author or assigned editors can modify a given challenge.",
        "operationId": "put_12",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Challenge"
        ],
        "summary": "Deletes given challenge",
        "description": "Only the author or assigned editors can delete a given challenge.",
        "operationId": "delete_7",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/technologies": {
      "get": {
        "tags": [
          "Technology"
        ],
        "summary": "Get list of technologies",
        "description": "Supports Query Refinement: Filter [id], Operator [eq]; Filter [name], Operator [eq, like]; Filter [verified], Operator [eq]; Sorting [name];",
        "operationId": "get",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Technology"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Technology"
        ],
        "summary": "Insert a new technology",
        "operationId": "post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Technology"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Technology"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/skills": {
      "get": {
        "tags": [
          "Skill"
        ],
        "summary": "Get list of skills inserted by users",
        "description": "Supports Query Refinement: Filter [id], Operator [eq]; Filter [name], Operator [eq, like]; Filter [verified], Operator [eq]; Sorting [name];",
        "operationId": "get_1",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Skill"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Skill"
        ],
        "summary": "Insert a new skill",
        "operationId": "post_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Skill"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Skill"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get list of projects",
        "description": "Supports Query Refinement: Filter [id], Operator [eq]; Filter [name], Operator [eq, like]; Expand, values [contacts,technologies];Sorting [name];",
        "operationId": "get_3",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a new project",
        "description": "Creating a new project needs elevated permissions.",
        "operationId": "post_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/team": {
      "get": {
        "tags": [
          "Project team"
        ],
        "summary": "Get list of employee project records for given project",
        "description": "Supports Query Refinement: Filter [employee.id], Operator [eq,in]; Filter [role.name], Operator [eq,in,like]; Expand, values [employee, project];",
        "operationId": "get_4",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeProject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project team"
        ],
        "summary": "Insert a new employee project entry for given project",
        "operationId": "post_3",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeProject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/bookings": {
      "get": {
        "tags": [
          "Project booking"
        ],
        "summary": "Get list of employee bookings for given project",
        "description": "Supports Query Refinement: Filter [employee.id], Operator [eq,in]; Filter [role.name], Operator [eq,in,like]; Expand, values [employee, project];",
        "operationId": "get_7",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project booking"
        ],
        "summary": "Insert a new booking entry for given project",
        "operationId": "post_5",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Booking"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{id}/avatar": {
      "get": {
        "tags": [
          "Employee avatar"
        ],
        "summary": "Get employee avatar or default (dummy) image, if non found",
        "operationId": "avatar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "image/png": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Employee avatar"
        ],
        "summary": "Upload image for given employee",
        "operationId": "upload",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/workhistory": {
      "get": {
        "tags": [
          "Employee work history"
        ],
        "summary": "Get list of work-history records for given employee",
        "description": "Supports Query Refinement: Expand, values [Roles];Sorting [period.start];",
        "operationId": "get_10",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkHistory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Employee work history"
        ],
        "summary": "Insert a new work-history record for given employee",
        "description": "User can add a new work-history record only for himself.",
        "operationId": "post_6",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkHistory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkHistory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/workexperience": {
      "get": {
        "tags": [
          "Employee work experience"
        ],
        "summary": "Get list of work-experience records for given employee",
        "description": "Supports Query Refinement: Sorting [period.start];",
        "operationId": "get_11",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkExperience"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Employee work experience"
        ],
        "summary": "Insert a new work-experience record for given employee",
        "description": "User can add a new work-experience record only for himself.",
        "operationId": "post_7",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkExperience"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkExperience"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/training": {
      "get": {
        "tags": [
          "Employee training"
        ],
        "summary": "Get list of training records for given employee",
        "description": "Supports Query Refinement: Sorting [period.start];",
        "operationId": "get_12",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Training"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Employee training"
        ],
        "summary": "Insert a new training record for given employee",
        "description": "User can add a new training record only for himself",
        "operationId": "post_8",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Training"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Training"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/projects": {
      "get": {
        "tags": [
          "Employee project"
        ],
        "summary": "Get list of employee project records for given employee",
        "description": "Supports Query Refinement: Filter [project.id], Operator [eq,in]; Filter [role.name], Operator [eq,in,like]; Expand, values [project];",
        "operationId": "get_13",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeProject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Employee project"
        ],
        "summary": "Insert a new employee project entry for given employee",
        "operationId": "post_9",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeProject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/education": {
      "get": {
        "tags": [
          "Education"
        ],
        "summary": "Get list of education entries for given employee",
        "description": "Supports Query Refinement: Sorting [period.start];",
        "operationId": "get_15",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Education"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Education"
        ],
        "summary": "Insert a new education entry for given employee",
        "operationId": "post_10",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Education"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Education"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/cv": {
      "get": {
        "tags": [
          "Employee CV"
        ],
        "summary": "Returns list of employee's CV records",
        "operationId": "getEmployeeCvs",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "Employee ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 0
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeCv"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Employee CV"
        ],
        "summary": "Uploads employees CV file",
        "operationId": "handleEmployeeCvFileUpload",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "Employee ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 0
          }
        ],
        "requestBody": {
          "description": "CV file content",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "employee-cv-file": {
                    "type": "string",
                    "description": "CV file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeCv"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/bookings": {
      "get": {
        "tags": [
          "Employee booking"
        ],
        "summary": "Get list of employee booking records for given employee",
        "description": "Supports Query Refinement: Filter [employee.id], Operator [eq,in]; Filter [role.name], Operator [eq,in,like]; Expand, values [employee, project];",
        "operationId": "get_16",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Employee booking"
        ],
        "summary": "Insert a new booking entry for given employee",
        "operationId": "post_11",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Booking"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/challenges": {
      "get": {
        "tags": [
          "Challenge"
        ],
        "summary": "Get list of Challenges",
        "description": "Supports Query Refinement: Filter [state.type], Operator [eq,in]; Filter [author.id], Operator [eq]; Filter [project.id], Operator [eq]; Expand, values [Skills, Roles, Author, Project];",
        "operationId": "get_17",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Challenge"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Challenge"
        ],
        "summary": "Insert a new challenge",
        "operationId": "post_12",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/technologies/{id}": {
      "get": {
        "tags": [
          "Technology"
        ],
        "summary": "Get a single technology by ID",
        "operationId": "getById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Technology"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/skills/{id}": {
      "get": {
        "tags": [
          "Skill"
        ],
        "summary": "Get a specific skill by ID",
        "operationId": "getById_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Skill"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Get list of available Roles",
        "description": "Roles are sorted alphabetically in descending order",
        "operationId": "get_2",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/team/history": {
      "get": {
        "tags": [
          "Project team"
        ],
        "summary": "Get list of employee project historic/past records for given project",
        "description": "Supports Query Refinement: Filter [employee.id], Operator [eq,in]; Filter [role.name], Operator [eq,in,like]; Expand, values [employee, project];",
        "operationId": "get_5",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeProject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/bookings/history": {
      "get": {
        "tags": [
          "Project booking"
        ],
        "summary": "Get list of bookings historic/past records for given project",
        "description": "Supports Query Refinement: Filter [employee.id], Operator [eq,in]; Filter [role.name], Operator [eq,in,like]; Expand, values [employee, project];",
        "operationId": "get_8",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeProject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get list of employees",
        "description": "Supports Query Refinement: Filter [active], Operator [eq]; Filter [id], Operator [in]; Expand, values [Contacts, Skills, Roles, Languages];",
        "operationId": "get_9",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Employee"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/projects/history": {
      "get": {
        "tags": [
          "Employee project history"
        ],
        "summary": "Get list of employee project history records for given employee",
        "description": "Supports Query Refinement: Filter [project.id], Operator [eq,in]; Filter [role.name], Operator [eq,in,like]; ",
        "operationId": "get_14",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "Employee ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 0
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeProjectHistoryViewRecord"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/{employeeId}/cv/{uuid}": {
      "get": {
        "tags": [
          "Employee CV"
        ],
        "summary": "Download employee CV",
        "operationId": "downloadEmployeeCv",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "Employee ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 0
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "CV uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/octet-stream": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Employee CV"
        ],
        "summary": "Delete employee CV",
        "operationId": "deleteEmployeeCv",
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "description": "Employee ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 0
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "CV uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/me": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get employee that corresponds to the current authenticated user",
        "description": "Supports Query Refinement: Expand, values [Contacts, Skills, Roles, Languages];",
        "operationId": "me",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/me/permissions": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get a list of permissions the current user has",
        "operationId": "mePermissions",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/languages": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get a list of all unique languages inserted by users",
        "operationId": "languages",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/employees/elevated": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get list of employees with elevated privileges",
        "description": "Supports Query Refinement: Filter [active], Operator [eq]; ",
        "operationId": "getElevated",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Employee"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/api/projects/{projectId}/pricing/{id}": {
      "delete": {
        "tags": [
          "Project pricing"
        ],
        "summary": "Delete existing pricing record by id",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPricing"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal exception",
            "content": {}
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ValidationErrorItem": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorItem"
            }
          }
        }
      },
      "NotFoundErrorResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "entity": {
            "type": "string"
          }
        }
      },
      "ForbiddenErrorResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "Birthday": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "hideAge": {
            "type": "boolean"
          },
          "employeeId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Contact": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "value": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "preferred": {
            "type": "boolean"
          }
        }
      },
      "DatePeriod": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Employee": {
        "required": [
          "gender",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNKNOWN"
            ]
          },
          "active": {
            "type": "boolean",
            "readOnly": true
          },
          "suspended": {
            "type": "boolean",
            "readOnly": true
          },
          "user": {
            "$ref": "#/components/schemas/Nameable"
          },
          "contacts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "skills": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeSkill"
            }
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderedRole"
            }
          },
          "languages": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Language"
            }
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "office": {
            "$ref": "#/components/schemas/Office"
          },
          "title": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "about": {
            "type": "string"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "birthday": {
            "$ref": "#/components/schemas/Birthday"
          },
          "workContractStartDate": {
            "type": "string",
            "format": "date"
          },
          "seniorityYears": {
            "type": "number",
            "format": "double"
          },
          "workload": {
            "type": "number",
            "format": "double"
          },
          "subcontractor": {
            "type": "boolean",
            "readOnly": true
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "allowedActions": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "string"
            }
          },
          "permissions": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EmployeeProject": {
        "required": [
          "employee",
          "project",
          "seniorityLevel",
          "workload"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "seniorityLevel": {
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "APPRENTICE",
              "JUNIOR",
              "EXPERIENCED",
              "SENIOR"
            ]
          },
          "period": {
            "$ref": "#/components/schemas/DatePeriod"
          },
          "workload": {
            "maximum": 1.0,
            "exclusiveMaximum": false,
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "type": "number",
            "format": "double"
          }
        }
      },
      "EmployeeSkill": {
        "required": [
          "category",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "TOP",
              "OTHER",
              "LEARNING"
            ]
          }
        }
      },
      "Identifiable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Language": {
        "required": [
          "name",
          "proficiency"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "proficiency": {
            "type": "string",
            "enum": [
              "ELEMENTARY",
              "PROFESSIONAL",
              "NATIVE"
            ]
          }
        }
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "bookingCount": {
            "type": "integer",
            "format": "int64"
          },
          "projectWorkload": {
            "type": "number",
            "format": "double"
          },
          "currentWorkloadPercentage": {
            "type": "number",
            "format": "double"
          },
          "statusDateWorkload": {
            "type": "number",
            "format": "double"
          },
          "statusDateWorkloadPercentage": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Nameable": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Office": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "town": {
            "type": "string"
          },
          "streetAddress": {
            "type": "string"
          },
          "allowedActions": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "string"
            }
          },
          "permissions": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OrderedRole": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "OrderedTechnology": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Project": {
        "required": [
          "contacts",
          "name",
          "percentage",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "clientName": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/DatePeriod"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PROSPECT",
              "INWORK",
              "INTERNAL"
            ]
          },
          "percentage": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "contacts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identifiable"
            }
          },
          "technologies": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderedTechnology"
            }
          },
          "lastSync": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "edited": {
            "type": "boolean"
          },
          "allowedActions": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "string"
            }
          },
          "permissions": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Role": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "Status": {
        "required": [
          "available",
          "date"
        ],
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          },
          "date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "FixedPricing": {
        "required": [
          "currency",
          "price",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FIXED_FULL_PRICE",
              "FIXED_PER_PERIOD"
            ]
          },
          "pricingPeriod": {
            "type": "string",
            "enum": [
              "WEEK",
              "MONTH"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "EUR",
              "USD"
            ]
          },
          "price": {
            "type": "number"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ProjectPricing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "projectId": {
            "type": "integer",
            "format": "int64"
          },
          "period": {
            "$ref": "#/components/schemas/DatePeriod"
          },
          "pricingLevel": {
            "type": "string",
            "enum": [
              "FIXED",
              "ROLE"
            ]
          },
          "fixedPricing": {
            "$ref": "#/components/schemas/FixedPricing"
          },
          "rolePricings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolePricing"
            }
          }
        }
      },
      "RolePricing": {
        "required": [
          "currency",
          "price",
          "pricingPeriodType",
          "role",
          "seniorityLevel"
        ],
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "seniorityLevel": {
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "APPRENTICE",
              "JUNIOR",
              "EXPERIENCED",
              "SENIOR"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "EUR",
              "USD"
            ]
          },
          "price": {
            "type": "number"
          },
          "pricingPeriodType": {
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "SPRINT"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Booking": {
        "required": [
          "project",
          "seniorityLevel",
          "workload"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "seniorityLevel": {
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "APPRENTICE",
              "JUNIOR",
              "EXPERIENCED",
              "SENIOR"
            ]
          },
          "period": {
            "$ref": "#/components/schemas/DatePeriod"
          },
          "workload": {
            "maximum": 1.0,
            "exclusiveMaximum": false,
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "type": "number",
            "format": "double"
          }
        }
      },
      "WorkHistory": {
        "required": [
          "customer",
          "project"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "customer": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "project": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/DatePeriod"
          }
        }
      },
      "WorkExperience": {
        "required": [
          "employer"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "employer": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/DatePeriod"
          },
          "role": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "Training": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "provider": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/DatePeriod"
          }
        }
      },
      "EmployeeProjectHistoryUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        }
      },
      "EmployeeProjectHistoryViewRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "period": {
            "$ref": "#/components/schemas/DatePeriod"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Education": {
        "required": [
          "school",
          "speciality"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "degree": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "speciality": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "school": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/DatePeriod"
          }
        }
      },
      "Challenge": {
        "required": [
          "challengeType",
          "state",
          "summary",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "summary": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "author": {
            "$ref": "#/components/schemas/Employee"
          },
          "period": {
            "$ref": "#/components/schemas/DatePeriod"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "completionReason": {
            "type": "string",
            "enum": [
              "HIRED",
              "CANCELLED"
            ]
          },
          "challengeType": {
            "type": "string",
            "enum": [
              "MISSING_ROLE",
              "NEED_CONSULTATION"
            ]
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderedRole"
            }
          },
          "skills": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderedSkill"
            }
          },
          "completed": {
            "type": "boolean"
          },
          "allowedActions": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "string"
            }
          },
          "permissions": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OrderedSkill": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "State": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DRAFT",
              "OPEN",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "Technology": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "Skill": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "EmployeeCv": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "authorUser": {
            "$ref": "#/components/schemas/Nameable"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "allowedActions": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "string"
            }
          },
          "permissions": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "authToken": {
        "type": "apiKey",
        "description": "Token from Auth module",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}